# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dlpcontainer_pb2 as dlpcontainer__pb2


class DlpServiceStub(object):
    """A service that detects and classifies sensitive information.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InspectContent = channel.unary_unary(
                '/privacy.dlpcontainer.DlpService/InspectContent',
                request_serializer=dlpcontainer__pb2.InspectContentRequest.SerializeToString,
                response_deserializer=dlpcontainer__pb2.InspectContentResponse.FromString,
                )
        self.InspectContentStream = channel.stream_stream(
                '/privacy.dlpcontainer.DlpService/InspectContentStream',
                request_serializer=dlpcontainer__pb2.InspectContentRequest.SerializeToString,
                response_deserializer=dlpcontainer__pb2.InspectContentResponse.FromString,
                )
        self.ListInfoTypes = channel.unary_unary(
                '/privacy.dlpcontainer.DlpService/ListInfoTypes',
                request_serializer=dlpcontainer__pb2.ListInfoTypesRequest.SerializeToString,
                response_deserializer=dlpcontainer__pb2.ListInfoTypesResponse.FromString,
                )
        self.DeidentifyContent = channel.unary_unary(
                '/privacy.dlpcontainer.DlpService/DeidentifyContent',
                request_serializer=dlpcontainer__pb2.DeidentifyContentRequest.SerializeToString,
                response_deserializer=dlpcontainer__pb2.DeidentifyContentResponse.FromString,
                )


class DlpServiceServicer(object):
    """A service that detects and classifies sensitive information.
    """

    def InspectContent(self, request, context):
        """Classifies sensitive information in a content item.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InspectContentStream(self, request_iterator, context):
        """Classifies sensitive informaation in a stream and returns a stream of
        findings. Changes to InspectConfig after the first call are ignored.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInfoTypes(self, request, context):
        """Returns the list of supported infotypes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeidentifyContent(self, request, context):
        """Replaces sensitive information with a deidentified or otherwise
        sanitized verion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DlpServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InspectContent': grpc.unary_unary_rpc_method_handler(
                    servicer.InspectContent,
                    request_deserializer=dlpcontainer__pb2.InspectContentRequest.FromString,
                    response_serializer=dlpcontainer__pb2.InspectContentResponse.SerializeToString,
            ),
            'InspectContentStream': grpc.stream_stream_rpc_method_handler(
                    servicer.InspectContentStream,
                    request_deserializer=dlpcontainer__pb2.InspectContentRequest.FromString,
                    response_serializer=dlpcontainer__pb2.InspectContentResponse.SerializeToString,
            ),
            'ListInfoTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInfoTypes,
                    request_deserializer=dlpcontainer__pb2.ListInfoTypesRequest.FromString,
                    response_serializer=dlpcontainer__pb2.ListInfoTypesResponse.SerializeToString,
            ),
            'DeidentifyContent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeidentifyContent,
                    request_deserializer=dlpcontainer__pb2.DeidentifyContentRequest.FromString,
                    response_serializer=dlpcontainer__pb2.DeidentifyContentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'privacy.dlpcontainer.DlpService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DlpService(object):
    """A service that detects and classifies sensitive information.
    """

    @staticmethod
    def InspectContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/privacy.dlpcontainer.DlpService/InspectContent',
            dlpcontainer__pb2.InspectContentRequest.SerializeToString,
            dlpcontainer__pb2.InspectContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InspectContentStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/privacy.dlpcontainer.DlpService/InspectContentStream',
            dlpcontainer__pb2.InspectContentRequest.SerializeToString,
            dlpcontainer__pb2.InspectContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListInfoTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/privacy.dlpcontainer.DlpService/ListInfoTypes',
            dlpcontainer__pb2.ListInfoTypesRequest.SerializeToString,
            dlpcontainer__pb2.ListInfoTypesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeidentifyContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/privacy.dlpcontainer.DlpService/DeidentifyContent',
            dlpcontainer__pb2.DeidentifyContentRequest.SerializeToString,
            dlpcontainer__pb2.DeidentifyContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
